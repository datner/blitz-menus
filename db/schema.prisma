// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model User {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  name           String?
  email          String   @unique
  hashedPassword String?
  role           Role     @default(USER)

  restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
  restaurantId Int?

  tokens   Token[]
  sessions Session[]
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Token {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hashedToken String
  type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

enum TokenType {
  RESET_PASSWORD
}

model Restaurant {
  id         Int              @id @default(autoincrement())
  slug       String           @unique
  logo       String
  content    RestaurantI18L[]
  menu       Menu?
  orders     Order[]
  categories Category[]
  inventory  Item[]
  bons       Bon[]
  users      User[]
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @default(now()) @updatedAt
}

model RestaurantI18L {
  id           Int        @id @default(autoincrement())
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId Int
  locale       Locale
  name         String
}

model Menu {
  id           Int        @id @default(autoincrement())
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId Int        @unique
  identifier   String     @unique
  categories   Category[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now()) @updatedAt

  @@unique([restaurantId, identifier])
}

model Category {
  id           Int            @id @default(autoincrement())
  menu         Menu?          @relation(fields: [menuId], references: [id])
  menuId       Int?
  restaurant   Restaurant     @relation(fields: [restaurantId], references: [id])
  restaurantId Int
  identifier   String         @unique
  content      CategoryI18L[]
  items        Item[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now()) @updatedAt

  @@unique([restaurantId, identifier])
}

model CategoryI18L {
  id          Int      @id @default(autoincrement())
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  Int
  locale      Locale
  name        String
  description String?  @default("")
}

model Item {
  id           Int         @id @default(autoincrement())
  price        Int
  identifier   String      @unique
  image        String
  blurDataUrl  String?
  content      ItemI18L[]
  orderItems   OrderItem[]
  category     Category    @relation(fields: [categoryId], references: [id])
  categoryId   Int
  restaurant   Restaurant  @relation(fields: [restaurantId], references: [id])
  restaurantId Int
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @default(now()) @updatedAt

  @@unique([restaurantId, identifier])
}

model ItemI18L {
  id          Int    @id @default(autoincrement())
  item        Item   @relation(fields: [itemId], references: [id])
  itemId      Int
  locale      Locale
  name        String
  description String
}

model Order {
  id           Int         @id @default(autoincrement())
  restaurant   Restaurant  @relation(fields: [restaurantId], references: [id])
  restaurantId Int
  bon          Bon?        @relation(fields: [bonId], references: [id])
  bonId        Int?
  table        String
  fulfilled    Boolean     @default(false)
  deleted      Boolean     @default(false)
  orderItems   OrderItem[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @default(now()) @updatedAt
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  item      Item     @relation(fields: [itemId], references: [id])
  itemId    Int
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   Int
  comment   String   @default("")
  amount    Int      @default(1)
  fulilled  Boolean  @default(false)
  deleted   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Bon {
  id           Int        @id @default(autoincrement())
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId Int
  table        String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now()) @updatedAt
  closed       Boolean    @default(false)
  lifespan     Int
  orders       Order[]
}

enum Locale {
  en
  he
}

enum Role {
  USER
  ADMIN
  SUPER
}
